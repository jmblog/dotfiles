#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"

# Logging stuff
function e_header()   { echo -e "\n\033[1;36m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_warning()  { echo -e " \033[1;35m!\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;33m➜\033[0m  $@"; }

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `bootstrap` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


# Step 0: Preparation
# ----------------------------------------------------------------------

# Check for gcc
if [[ ! $(type -P gcc) ]]; then
  e_error "The XCode Command Line Tools must be installed first."
  printf "  Download them from: https://developer.apple.com/downloads\n"
  printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
  exit 1
fi

# Check for Homebrew
if [[ ! $(type -P brew) ]]; then
  e_header "Installing Homebrew..."
  /usr/bin/ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
else
  e_header "Updating Homebrew..."
  brew update
fi

# Check for git
if [[ ! $(type -P git) ]]; then
  e_header "Installing Git..."
  brew install git
fi


# Step 1: Initialization
# ----------------------------------------------------------------------

if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
  e_header "Downloading dotfiles..."
  git clone --recursive git@github.com:jmblog/dotfiles.git ${DOTFILES_DIRECTORY}  
  cd ${DOTFILES_DIRECTORY}
else
  e_header "Updating dotfiles..."
  cd ${DOTFILES_DIRECTORY}
  git pull
  git submodule update --init --recursive --quiet
fi

# Utilities
source ./lib/utils


# Step 2: Setup Chef
# ----------------------------------------------------------------------

# Check for rbenv
pkgs=(rbenv ruby-build)
for pkg in ${pkgs[@]}
do
  if ! formula_exists $pkg; then
    e_header "Installing ${pkg}..."
    brew install $pkg
  fi
done

# rbenv init
eval "$(rbenv init -)"

# Install Ruby
versions=(2.0.0-p247)
list="$(to_install "${versions[*]}" "$(rbenv whence ruby)")"
if [[ "$list" ]]; then
  e_header "Installing Ruby versions: $list"
  for version in $list
  do
    rbenv install "$version"
  done
  [[ "$(echo "$list" | grep -w "${versions[0]}")" ]]
  rbenv global "${versions[0]}"
  rbenv shell "${versions[0]}"
  rbenv rehash
fi

# Update rubygem
e_header "Updating RubyGems..."
gem update --system
rbenv rehash

if ! type_exists 'bundle'; then
  # Install Bundler
  e_header "Installing Bundler..."
  gem install bundler
  rbenv rehash
fi
 
# Install gems (included Chef) 
e_header "Installing and updating gems with Bundler..."
bundle update
rbenv rehash
sudo chown -R $USER /tmp/chef-solo

# Install and update third-party cookbooks
e_header "Installing and updating Chef's third-party cookbooks with Berkshelf..."
cd chef-repo
bundle exec berks --path cookbooks
cd ..


# Step 3: Main Stuff
# ----------------------------------------------------------------------
e_header "Setup development environment..."
chef_cmd='chef-solo -c chef-repo/solo.rb -j chef-repo/nodes/localhost.json'
printf "${chef_cmd}\n" && ${chef_cmd}


# Step 4: OS X Settings
# ----------------------------------------------------------------------
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
  bash ./bin/osxdefaults
  e_success "OS X settings updated! You may need to restart."
else
  printf "Skipped OS X settings update.\n"
fi

e_header "All done!"

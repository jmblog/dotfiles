#!/usr/bin/env bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
TS=$(date +'%Y%m%d%H%M%S')

echo -e "\n\x1B[32mDotfiles\x1B[39m - https://github.com/jmblog/dotfiles"

# Functions
# ----------------------------------------------------------------------

# Logging stuff
function log_warn()    { echo -e "\x1B[31m\x1B[4mWarning\x1B[24m\x1B[39m: $@"; }
function log_error()   { echo -e "\x1B[31m\x1B[4mError\x1B[24m\x1B[39m: $@"; }
function log_ok()      { echo -e "\x1B[32m==> \x1B[39m$@"; }
function log_success() { echo -e "\x1B[32m$@\x1B[39m"; }
function log_fail()    { echo -e "\x1B[31m$@\x1B[39m"; }
function log_header()  { echo -e "\x1B[4m$@\x1B[24m"; }
function log_subhead() { echo -e "\x1B[1m$@\x1B[22m"; }
function log_info()    { echo -e "\x1B[33m==> \x1B[39m$@"; }

#log_warn "warning message"
#log_error "error message"
#log_ok "ok message"
#log_success "success message"
#log_fail "fail message"
#log_header "header message"
#log_subhead "subhead message"
#log_info "info message"

function link() {
    # Force create/replace the symlink.
    if ! diff "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}" > /dev/null 2>&1; then
      log_info "diff ${DOTFILES_DIRECTORY}/${1} ${HOME}/${2}"
      diff "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
      seek_confirmation "Are you sure to overwrite ${2}?"
      if is_confirmed; then
        ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
        log_ok "Done!"
      else
        log_info "Skipped."
      fi
      echo ""
    else
      ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
    fi
}

function mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    if ! diff ${DOTFILES_DIRECTORY}/git/gitconfig ${HOME}/.gitconfig > /dev/null 2>&1; then
      log_info "diff ${DOTFILES_DIRECTORY}/git/gitconfig ${HOME}/.gitconfig"
      diff ${DOTFILES_DIRECTORY}/git/gitconfig ${HOME}/.gitconfig
      seek_confirmation "Are you sure to overwrite .gitconfig?"
      if is_confirmed; then
        rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
      else
        log_info "Skipped."
      fi
    else
      rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
    fi

    # Force remove the vim directory if it's already there.
    if [ -e "${HOME}/.vim" ]; then
      seek_confirmation "Are you sure to overwrite .vim directory?"
      if is_confirmed; then
        mv "${HOME}/.vim" "${HOME}/_vim-${TS}"
        ln -fs "${DOTFILES_DIRECTORY}/vim" "${HOME}/.vim"
      else
        log_info "Skipped."
      fi
    else
        ln -fs "${DOTFILES_DIRECTORY}/vim" "${HOME}/.vim"
    fi

    # Atom
    if [ -e "${HOME}/.atom" ]; then
      seek_confirmation "Are you sure to overwrite .atom directory?"
      if is_confirmed; then
        mv "${HOME}/.atom" "${HOME}/_atom-${TS}"
        ln -fs "${DOTFILES_DIRECTORY}/osx/atom" "${HOME}/.atom"
      else
        log_info "Skipped."
      fi
    else
        ln -fs "${DOTFILES_DIRECTORY}/osx/atom" "${HOME}/.atom"
    fi

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "ag/agignore"        ".agignore"
    link "bash/bashrc"        ".bashrc"
    link "bash/bash_profile"  ".bash_profile"
    link "git/gitattributes"  ".gitattributes"
    link "git/gitignore"      ".gitignore"
    link "bash/inputrc"       ".inputrc"
    link "tmux/tmuxrc"        ".tmuxrc"
    link "vim/vimrc"          ".vimrc"
}

# Ask for confirmation before proceeding
function seek_confirmation() {
  printf "\n"
  if [[ $# > 0 ]]; then
    log_warn "$@"
  fi
  read -p "Continue? (y/n): " -n 1
  printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
function is_confirmed() {
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    return 0
  fi
  return 1
}


# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
function formula_exists() {
  if $(brew list $1 >/dev/null); then
      return 0
  fi

  log_warn "Missing formula: $1"
  return 1
}

# Preparation
# ----------------------------------------------------------------------

if [[ "$OSTYPE" =~ ^darwin ]]; then
  # Check for gcc
  if [[ ! $(type -P gcc) ]]; then
    log_fail "The XCode Command Line Tools must be installed first.\n"
    log_fail "  1. Run \`xcode-select --install\` to install them."
    log_fail "  2. Then run: bash ~/.dotfiles/bin/dotfiles"
    exit 1
  fi

  # Check for Homebrew
  if [[ ! $(type -P brew) ]]; then
    log_header "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # Check for git
  if [[ ! $(type -P git) ]]; then
    log_header "Updating Homebrew..."
    brew update
    log_header "Installing Git..."
    brew install git
  fi
else
  # Check for git
  if [[ ! $(type -P git) ]]; then
    log_fail "Git should be installed."
    log_fail "  1. Download the latest version from: http://git-scm.com/"
    log_fail "  2. Then run: bash ~/.dotfiles/bin/dotfiles"
    exit 1
  fi
fi

# Ask for the administrator password upfront
echo ""
sudo -v -p "Password for sudo: "
echo ""

# Keep-alive: update existing `sudo` time stamp until `dotfiles` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


# Initialization
# ----------------------------------------------------------------------

if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
  log_header "Downloading dotfiles..."
  git clone --recursive git@github.com:jmblog/dotfiles.git ${DOTFILES_DIRECTORY}
  cd ${DOTFILES_DIRECTORY}
else
  log_header "Syncing dotfiles..."
  cd ${DOTFILES_DIRECTORY}
  git pull
  git submodule update --init --recursive --quiet
fi
echo ""

# Utilities
source ${DOTFILES_DIRECTORY}/lib/utils


# Install dotfiles
# ----------------------------------------------------------------------

log_header "Installing dotfiles..."
mirrorfiles
source ${HOME}/.bash_profile
log_ok "Done!"
echo ""


# Install node packages
# ----------------------------------------------------------------------

log_header "Installing node packages..."
seek_confirmation
if is_confirmed; then
  echo "${USER}"
  . ${DOTFILES_DIRECTORY}/node/setup.sh
  log_ok "Done!"
else
  log_info "Skipped."
fi
echo ""


# Install ruby gems
# ----------------------------------------------------------------------

log_header "Installing ruby gems..."
seek_confirmation
if is_confirmed; then
  bash ${DOTFILES_DIRECTORY}/ruby/setup.sh
  log_ok "Done!"
else
  log_info "Skipped."
fi
echo ""

# Install homebrew formulaes (only with osx)
# ----------------------------------------------------------------------

if is_osx; then
  log_header "Installing homebrew packages..."
  seek_confirmation
  if is_confirmed; then
    bash ${DOTFILES_DIRECTORY}/osx/homebrew/setup.sh
    brew doctor
    # using bash 4
    # This is where brew stores its binary symlinks
    binroot="$(brew --config | awk '/HOMEBREW_PREFIX/ {print $2}')"/bin
    if [[ "$(type -P $binroot/bash)" && "$(cat /etc/shells | grep -q "$binroot/bash")" ]]; then
      log_subhead "Adding $binroot/bash to the list of acceptable shells"
      echo "$binroot/bash" | sudo tee -a /etc/shells >/dev/null
    fi
    if [[ "$SHELL" != "$binroot/bash" ]]; then
      log_subhead "Making $binroot/bash your default shell"
      sudo chsh -s "$binroot/bash" "$USER" >/dev/null 2>&1
      log_info "To make Bash 4 your default shell"
      log_info "  1. Add $binroot/bash into /etc/shells"
      log_info "  2. Run `chsh -s $binroot/bash`"
    fi

    log_ok "Done!"
  else
    log_info "Skipped."
  fi
  echo ""
fi

# Install atom packages
# ----------------------------------------------------------------------

if is_osx; then
  log_header "Installing atom packages..."
  seek_confirmation
  if is_confirmed; then
    bash ./osx/atom/apm-install.sh
    log_ok "done!"
  else
    log_info "skipped."
  fi
  echo ""
fi

# Set OS X system defaults
# ----------------------------------------------------------------------

if is_osx; then
  log_header "Setting osx system defaults..."
  seek_confirmation
  if is_confirmed; then
    bash ./bin/osxdefaults
    bash ~/.dotfiles/osx/karabiner.sh
    log_ok "Done!"
    log_info "** You may need to restart."
  else
    log_info "Skipped."
  fi
  echo ""
fi

# All done!
log_success "All done!üç∫"

#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/jmblog/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/jmblog/dotfiles"

# Step 0
# ----------------------------------------------------------------------

## If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/utils

# Test for known flags
for opt in $@
do
  case $opt in
    --no-packages) no_packages=true ;;
    --no-apps) no_apps=true ;;
    --no-sync) no_sync=true ;;
    -*|--*) e_warning "Warning: invalid option $opt" ;;
  esac
done

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
  e_error "The XCode Command Line Tools must be installed first."
  printf "  Download them from: https://developer.apple.com/downloads\n"
  printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
  exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
  e_header "Installing Homebrew..."
  /usr/bin/ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
else
  e_header "Updating Homebrew..."
  brew update
fi

# Check for git
if ! type_exists 'git'; then
  e_header "Installing Git..."
  brew install git
fi

# Initialize the git repo if it's missing
if ! is_git_repo; then
  e_header "Initializing git repository..."
  git init
  git remote add origin ${DOTFILES_GIT_REMOTE}
  git fetch origin master
  git reset --hard FETCH_HEAD
  git clean -fd
fi

# Check for rbenv
pkgs=(rbenv ruby-build)
for pkg in ${pkgs[@]}
do
  if ! formula_exists $pkg; then
    e_header "Installing ${pkg}..."
    brew install $pkg
    [[ $? ]] && e_success "Done"
  fi
done

# rbenv init
eval "$(rbenv init -)"

# Install Ruby
versions=(1.9.3-p429)
list="$(to_install "${versions[*]}" "$(rbenv whence ruby)")"
if [[ "$list" ]]; then
  e_header "Installing Ruby versions: $list"
  for version in $list
  do
    rbenv install "$version"
  done
  [[ "$(echo "$list" | grep -w "${versions[0]}")" ]]
  rbenv global "${versions[0]}"
  rbenv shell "${versions[0]}"
  rbenv rehash
  [[ $? ]] && e_success "Done"
fi

# Install Chef
if ! type_exists 'chef-solo'; then
    e_header "Installing Chef and knife-solo..."
    gem install chef knife-solo
    rbenv rehash
    sudo chown -R $USER /tmp/chef-solo
    [[ $? ]] && e_success "Done"
fi

# Install and update third-party cookbook
# Using submodule might be good.


# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
  printf "Skipped dotfiles sync.\n"
else
  e_header "Syncing dotfiles..."
  git pull --rebase origin master
  git submodule update --recursive --init --quiet
fi

# Step 1
# ----------------------------------------------------------------------

# Install and update packages
if [[ $no_packages ]]; then
  printf "Skipped package installations.\n"
else
  e_header "Install and Update homebrew and npm packages...\n"
  chef-solo -c chef/solo.rb -j chef/roles/packages.json
  [[ $? ]] && e_success "Done"
fi

# Step 2
# ----------------------------------------------------------------------

# Install applications
if [[ $no_apps ]]; then
  printf "Skipped application installations.\n"
else
  e_header "Install apps...\n"
  chef-solo -c chef/solo.rb -j chef/roles/apps.json
  [[ $? ]] && e_success "Done"
fi

# Update dotfiles
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
  chef-solo -c chef/solo.rb -j chef/roles/mirrorfiles.json
  source ${HOME}/.bash_profile
else
  printf "Skipped dotfiles update.\n";
fi

# Update OS X settings
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
  chef-solo -c chef/colo.rb -j chef/roles/osxdefaults.json
  [[ $? ]] && e_success "OS X settings updated! You may need to restart."
else
  printf "Skipped OS X settings update.\n"
fi

# Run Chef-Solo
#e_header "Running Chef-Solo..." 
#chef-solo -c chef/solo.rb -j chef/nodes/localhost.json
#[[ $? ]] && e_success "Done"
